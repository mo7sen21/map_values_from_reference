# -*- coding: utf-8 -*-
"""Copy of auto_v3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dHtxm3C23wRJMQY57u1TWWMrvurbiyBJ

Run the first cell alone then restart and run all
"""

!pip install gspread --upgrade
!pip install --upgrade openpyxl

import gspread

from google.colab import drive
drive.mount('/content/drive')

from datetime import datetime,date,timedelta

start_time = datetime.now()
start_time

import gspread
from oauth2client.service_account import ServiceAccountCredentials
import pandas as pd 
import numpy as np 
import time
import os
from calendar import monthrange
from dateutil.relativedelta import relativedelta
from google.colab import output


scope = ["'**********/" , "'**********/"]

credentials = ServiceAccountCredentials.from_json_keyfile_name('/content/drive/MyDrive/daily files/**********/', scope )

gc = gspread.authorize(credentials)

yesterday = date.today() - timedelta(days=1)
the_day_before = date.today() - timedelta(days=2)
yest_month = f'{yesterday:%B}'
yest_month

thirty_ago = date.today() - timedelta(days=30)
thirty_ago

date.today().day ==1

if date.today().day ==1:
  last_month_d = datetime.now() - relativedelta(months=2)
  months_num_days = monthrange(last_month_d.year, last_month_d.month)[1]
  mtd_str = 'MTD ' + f'{last_month_d:%b} ' +str(months_num_days)
  mtd_str
else:
  last_month_d = datetime.now() - relativedelta(months=1)
  months_num_days = monthrange(last_month_d.year, last_month_d.month)[1]
  mtd_str = 'MTD ' + f'{last_month_d:%b} ' +str(months_num_days)
  mtd_str

mtd_str

if date.today().day ==1:
  curr_month_d = datetime.now() - relativedelta(months=1)
  current_month_days_count = monthrange(curr_month_d.year, curr_month_d.month)[1]
  current_month_days_count
else:
  curr_month_d = datetime.now()
  current_month_days_count = monthrange(curr_month_d.year, curr_month_d.month)[1]
  current_month_days_count

current_month_days_count

"""# Loading sheets

"""

dirctory = "/content/drive/MyDrive/daily files/"
os.listdir(dirctory)

dirctory = "/content/drive/MyDrive/daily files/"
for f in os.listdir(dirctory):
  if 'PrintHistory' in f:
    orig = dirctory + f
    chng = dirctory+ 'stamps.csv'
    os.rename(orig,chng)
    stamps_file = chng
  elif 'easypost' in f:
    orig = dirctory + f
    chng = dirctory+ 'easyp.csv'
    os.rename(orig,chng)
    easypost_file = chng
  elif 'Nano-Daily-Profit-Report' in f:
    orig = dirctory + f
    chng = dirctory+ 'fb.csv'
    os.rename(orig,chng)
    fb_file = chng
  elif 'Nano Hearing Aids - Network -' in f:
    orig = dirctory + f
    chng = dirctory+ 'tb.csv'
    os.rename(orig,chng)
    tb_file = chng
  elif 'AdRoll' in f:
    orig = dirctory + f
    chng = dirctory+ 'adrol.xlsx'
    os.rename(orig,chng)
    adroll_file = chng
  elif 'Adwords' in f:
    orig = dirctory + f
    chng = dirctory+ 'google.csv'
    os.rename(orig,chng)
    google_file = chng
  elif 'complete-shipping-report' in f:
    orig = dirctory + f
    chng = dirctory+ 'easy_sh.csv'
    os.rename(orig,chng)
    usps_ship_file = chng
  elif 'Day_Week Breakdown' in f:
    orig = dirctory + f
    chng = dirctory+ 'promedia.csv'
    os.rename(orig,chng)
    promedia_file = chng
  elif 'Total Attributed Revenue' in f:
    orig = dirctory + f
    chng = dirctory+ 'attent_rev.xlsx'
    os.rename(orig,chng)
    attent_rev_file = chng
  elif 'Billable Spend' in f:
    orig = dirctory + f
    chng = dirctory+ 'attent_cost.xlsx'
    os.rename(orig,chng)
    attent_cost_file = chng
  elif 'ClientCampaignAnalysis' in f:
    orig = dirctory + f
    chng = dirctory+ 'nmc.xlsx'
    os.rename(orig,chng)
    nmc_file = chng
  elif 'micro-spanner-313715-3389d80f34d0' in f:
    pass
  elif 'sales' in f:
    df_scout = pd.read_csv(dirctory+f)
    if df_scout.iloc[0,0] == 'First-time':
      orig = dirctory+f
      chng = dirctory+'first.csv'
      os.rename(orig,chng)
      first_file = chng
    if len(df_scout.columns) == 4:
      orig = dirctory+f
      chng = dirctory+'base.csv'
      os.rename(orig,chng)
      base_file = chng  
    if 'product_title' in df_scout.columns:
      orig = dirctory+f
      chng = dirctory+'cogs.csv'
      os.rename(orig,chng)
      cogs_file = chng
    if 'api_client_title' in df_scout.columns:
      orig = dirctory+f
      chng = dirctory+'aov.csv'
      os.rename(orig,chng)
      aov_file = chng
  elif 'Bing_Jeff_Daily' in f:
    orig = dirctory + f
    chng = dirctory+ 'bing.xlsx'
    os.rename(orig,chng)
    bing_file = chng  
  elif 'ExpensesTrend' in f:
    orig = dirctory + f
    chng = dirctory + 'stamps_expnses.csv'
    os.rename(orig,chng)
    exp_stamps_file = chng
  else:
    try:
      df_scout = pd.read_csv(dirctory+f, error_bad_lines=False)
      print(f)
      print(df_scout.iloc[0,0])
      if 'Report Name: Bing-Jeff Daily' in df_scout.columns:
        orig = dirctory + f
        chng = dirctory+ 'bing.csv'
        os.rename(orig,chng)
        bing_file = chng
    except:
      pass

facebook = pd.read_csv(fb_file)

base_fig = pd.read_csv(base_file)
google = pd.read_csv(google_file,skiprows=2)
taboola = pd.read_csv(tb_file)
facebook = pd.read_csv(fb_file)
adroll= pd.read_excel(adroll_file,skiprows=[i for i in range(0,4)])
bing = pd.read_excel(bing_file,skiprows=[i for i in range(0,7)])
nmc = pd.read_csv(nmc_file , sep ='\t')
#attent = pd.read_excel(attent_cost_file, sheet_name='Daily Message Cost')
#attent_rev = pd.read_excel(attent_rev_file)
#promedia = pd.read_csv(promedia_file)
aov = pd.read_csv(aov_file)
first = pd.read_csv(first_file)
new_cogs = pd.read_csv(cogs_file)
if 'easypost_file' in globals():
  easy_ship = pd.read_csv(easypost_file)
#usps_ship = pd.read_csv(usps_ship_file,skiprows=[i for i in range(0,5)])
#stamps = pd.read_csv(stamps_file, index_col=False)
if 'exp_stamps_file' in globals():
  exp_stamps = pd.read_csv(exp_stamps_file)

#taboola = pd.read_csv(dirctory+'Nano Hearing Aids - Network - Day - All Campaigns - Mar-10-2022 - Apr-08-2022.csv')

main = gc.open('Nano Daily Profit - 2021')

new = main.worksheet("New Daily Profit")

"""# fill Daily Cogs"""

cogs_google = gc.open('Daily COGS raw data for Daily profit report')
d_cogs = cogs_google.worksheet("COGS summary")
shopify_row_cogs = cogs_google.worksheet("Shopify Raw Data")

shopify_row_cogs.row_count

yesterday = date.today() - timedelta(days=1)
the_day_before = date.today() - timedelta(days=2)
the_day_before

yesterday_str = f'{yesterday.month}/{yesterday.day}/{yesterday.year}'
yesterday_str

the_day_before_str = f'{the_day_before.month}/{the_day_before.day}/{the_day_before.year}'
the_day_before_str

shopif_cells= shopify_row_cogs.findall(the_day_before_str)
shopif_cells[-1]

last_old_row = shopif_cells[-1].row
last_old_row

new_cogs_count = len(new_cogs)
new_cogs_count

shopify_row_cogs.resize(rows=last_old_row+new_cogs_count)

new_cogs.fillna('',inplace =True)
new_cogs

new_cogs.loc[:,'order_name':'product_title']

new_cogs.columns

edited_cogs = pd.DataFrame()
edited_cogs['Date'] = [yesterday_str] * new_cogs_count
edited_cogs['order_name'] = new_cogs['order_name']
edited_cogs['variant_sku'] =  new_cogs['variant_sku']
edited_cogs['product_title'] = new_cogs['product_title']
edited_cogs['net_quantity'] = new_cogs['net_quantity']  
edited_cogs['gross_sales'] = new_cogs['gross_sales']
edited_cogs['discounts'] =  new_cogs['discounts']
edited_cogs['returns'] = new_cogs['returns']
edited_cogs['net_sales'] = new_cogs['net_sales']
edited_cogs['shipping'] = new_cogs['shipping']  
edited_cogs['taxes'] = new_cogs['taxes']
edited_cogs['total_sales'] =  new_cogs['total_sales']
edited_cogs['total_cost'] = new_cogs['total_cost']

edited_cogs

'B{}:D{}:'.format(last_old_row+1, last_old_row+new_cogs_count)

edited_cogs.fillna('',inplace=True)

shopify_row_cogs.update('A{}:D{}'.format( last_old_row+1 , last_old_row + new_cogs_count ),
               edited_cogs.loc[:,'Date':'product_title'].values.tolist(), 
                       value_input_option='USER_ENTERED')

shopify_row_cogs.update('I{}:Q{}'.format( last_old_row+1 , last_old_row + new_cogs_count ),
               edited_cogs.loc[:,'net_quantity':'total_cost'].values.tolist(),
                       value_input_option='USER_ENTERED')

shopify_rows = []
for row_n in range(last_old_row+1, last_old_row + new_cogs_count+1):
    shopify_rows.append(row_n)
print(shopify_rows[0],shopify_rows[-1])

cogs_f_df =  pd.DataFrame(np.nan , index = range(last_old_row+1, last_old_row + new_cogs_count+1),
                         columns = ['E','F','G','H'])

for row_n in range(last_old_row+1, last_old_row + new_cogs_count+1):
    cogs_f_df['E'][row_n] = f'=if(C{row_n}="","No SKU",vlookup(C{row_n},cogs!$BY:$CE,7,FALSE))'
    cogs_f_df['F'][row_n] = f'=if(C{row_n}="","0",vlookup(C{row_n},cogs!$BY:$CE,6,FALSE)*I{row_n})'
    cogs_f_df['G'][row_n] = f'=IFS(AND(M{row_n}=0,I{row_n}<=0),"refunded/cancelled",AND(M{row_n}=0,I{row_n}>0),"free order", M{row_n}>0 ,"new order" , M{row_n}<0 ,"exchange")'
    cogs_f_df['H'][row_n] = f'=IFS(G{row_n}="new order",F{row_n},G{row_n}="Free Order",F{row_n},G{row_n}="refunded/cancelled",-F{row_n},G{row_n}="exchange",F{row_n})'
    #print(row_n)

shopify_row_cogs.update('E{}:H{}'.format( last_old_row+1 , last_old_row + new_cogs_count ),
               cogs_f_df.values.tolist(),
                       value_input_option='USER_ENTERED')

"""# Make sure u update the formula then procceed"""

d_cogs.acell('K4')

d_cogs.acell('B3').value

yesterday_str

d_cogs.acell('B3').value == yesterday_str

while d_cogs.acell('B3').value != yesterday_str:
    output.eval_js('new Audio("https://upload.wikimedia.org/wikipedia/commons/0/05/Beep-09.ogg").play()')
    input('Did you update the formula  cogs sheet ? ..')

while d_cogs.acell('K4').value == '#N/A':
    output.eval_js('new Audio("https://upload.wikimedia.org/wikipedia/commons/0/05/Beep-09.ogg").play()')
    input('Did you fix the NA in the cogs sheet ? ..')

while d_cogs.acell('I4').value == '#N/A':
    output.eval_js('new Audio("https://upload.wikimedia.org/wikipedia/commons/0/05/Beep-09.ogg").play()')
    input('Did you fix the NA in the cogs sheet ? ..')

while d_cogs.acell('I5').value == '#N/A':
    output.eval_js('new Audio("https://upload.wikimedia.org/wikipedia/commons/0/05/Beep-09.ogg").play()')
    input('Did you fix the NA in the cogs sheet ? ..')

new_yesterday = f'{yesterday.day}-{yesterday:%b}'
new_yesterday

cell = new.find(new_yesterday)
x = cell.row
x

mtd_str

cell = new.find(mtd_str)
limit = cell.row
limit

yesterday

f'{yesterday.day}-{yesterday:%b}-{yesterday:%Y}'

if limit - x < 30:
    prev_x = 30 -(limit-x-1) + limit
    print(prev_x)

"""# Part 1"""

base_fig

#adding formula still needs checking

base_edited = pd.DataFrame()
base_edited['orders'] = base_fig['orders']
base_edited['gross_sales'] = base_fig['gross_sales']
base_edited['def_ref'] = f'=-30000/{current_month_days_count}'
base_edited['gross_sales_added'] = f'=C{x}+D{x}'
base_edited['discounts'] = base_fig['discounts']
base_edited['real_sales'] = f'=iferror(E{x}+F{x},"TBD")'
base_edited['returns'] = base_fig['returns']

#range for first columns 
range1 = 'B{}:K{}'.format(x,x) 
range1

new.update(range1 , base_edited.values.tolist(),value_input_option='USER_ENTERED')

"""# Cogs 
still needs more work
"""

d_cogs.acell('I4').value.replace(',','')

d_cogs.acell('I5').value.replace(',','')

tag_column = d_cogs.range("C1:C{}".format(d_cogs.row_count))
for cell in tag_column:
    if cell.value == 'new order':
        print(cell)
        paid_marker = cell.row
        print(paid_marker)
        break

for cell in tag_column:
    if cell.value == 'free order':
        print(cell)
        free_marker = cell.row
        print(free_marker)
        break

new.update_acell('P{}'.format(x), float(d_cogs.acell(f'I{free_marker}').value.replace(',','') )* -1)
new.update_acell('Q{}'.format(x), float(d_cogs.acell(f'I{paid_marker}').value.replace(',',''))* -1)

"""# Part 2: Web Marketing """

bing = pd.read_excel(bing_file,skiprows=[i for i in range(0,6)])
google = pd.read_csv(google_file,skiprows=2)

bing = bing[:-3]

bing

google['Day'] = pd.to_datetime(google['Day'])
bing['Date'] = pd.to_datetime(bing['Date']).dt.date

bing['Spend'] = bing['Spend'].astype(float)

google['Cost'] =google['Cost'].replace(',','', regex=True).astype(float)
google['Conv. value'] =google['Conv. value'].replace(',','', regex=True).astype(float)
taboola['Value'] =taboola['Value'].replace(',','', regex=True).astype(float)
taboola['Spent']=taboola['Spent'].replace(',','', regex=True).astype(float)
bing['Revenue'] = bing['Revenue'].replace(',','', regex=True).astype(float)

#goruping by day for all , this is focused for the main sheet only 

google_g = google.groupby(['Day']).sum().reset_index()
bing_g = bing.groupby(['Date']).sum().reset_index()
adroll_g = adroll.groupby(['Day']).sum().reset_index()
tb_g = taboola.groupby(['Date (US/Eastern)']).sum().reset_index()
fb_g = facebook.groupby(['Day']).sum().reset_index()

google_g['Day'] = pd.to_datetime(google_g['Day'])
bing_g['Date'] = pd.to_datetime(bing_g['Date'])
adroll_g['Day'] = pd.to_datetime(adroll_g['Day'])
tb_g['Date (US/Eastern)'] = pd.to_datetime(tb_g['Date (US/Eastern)'])
fb_g['Day'] = pd.to_datetime(fb_g['Day'])

adroll_g

idx = pd.date_range(thirty_ago, yesterday)
idx

# this is added to fill the missing dates with 0 values in Adroll data
adroll_g.index = pd.DatetimeIndex(adroll_g['Day'])
adroll_g = adroll_g.reindex(idx)
adroll_g['Day'] = adroll_g.index
adroll_g.fillna(0,inplace=True)
adroll_g

#this could exclude tabola, adroll , and facebook as they are per day already 
google_g.sort_values(by='Day', ascending = False,inplace = True)
bing_g.sort_values(by='Date', ascending = False,inplace = True)
adroll_g.sort_values(by='Day', ascending = False,inplace = True)
tb_g.sort_values(by='Date (US/Eastern)', ascending = False,inplace = True)
fb_g.sort_values(by='Day', ascending = False,inplace = True)

google_g = google_g.reset_index()
bing_g = bing_g.reset_index()
adroll_g = adroll_g.reset_index()
tb_g = tb_g.reset_index()
fb_g = fb_g.reset_index()

bing_g

adroll_g

adroll_g['Spend']*-1

#will add naf with condition ,as it dosen't always have value 
web_cost = pd.DataFrame()
web_cost['fb'] = fb_g['Amount spent (USD)']*-1
web_cost['taboola'] = tb_g['Spent']*-1
web_cost['adroll'] = adroll_g['Spend']*-1
web_cost['google'] = google_g['Cost']*-1
web_cost['bing'] = bing_g['Spend']*-1

web_cost

x

#this is to split around the mtd row

web_days = len(web_cost)
current_month_days = limit-x
last_month = web_days-current_month_days

print( web_days, current_month_days, last_month)

web_cost[:current_month_days]

web_cost[current_month_days:]

web_cost.fillna(0,inplace=True)

limit - x

print(x)
print(limit)

len(web_cost)

#range for web current month, commented is the old way for 7 days

if limit - x >=  len(web_cost):
#if limit - x <= 6:
    range_w_1 = 'V{}:Z{}'.format(x,limit-1) 
    print(range_w_1)
else:
    range_w_1 = 'V{}:Z{}'.format(x,x+current_month_days-1)
    print(range_w_1)

#range for web last month

range_web_2 = 'V{}:Z{}'.format(limit+1, limit+last_month) 
range_web_2

if limit - x >=  len(web_cost):
#if limit - x <= 6:
    new.update(range_w_1 , web_cost.values.tolist())
else:
    new.update(range_w_1 , web_cost[:current_month_days].values.tolist())

web_cost[current_month_days:]

if limit - x <  len(web_cost):
#if limit - x <= 6:
    new.update(range_web_2 ,web_cost[current_month_days:].values.tolist())

"""# NMC

"""

nmc['Date'] = pd.to_datetime(nmc['Date']).dt.date
nmc_g = nmc.groupby(['Date'])['Price'].sum().reset_index()
#nmc_g = nmc_g[:-1]
nmc_g.sort_values(by='Date', ascending = False,inplace = True)
nmc_g = nmc_g.reset_index()
nmc_g

nmc_g['n_c'] = nmc_g['Price']*-1
nmc_cost = nmc_g['n_c'].tolist()
nmc_cost

nmc_g

range_nmc = 'AA{}:AA{}'.format(x,limit-1)
range_nmc

#https://stackoverflow.com/questions/16675258/python-gspread-how-can-i-update-multiple-cells-with-different-values-at-once
cell_list = new.range(range_nmc)
cell_values = nmc_cost

for i, val in enumerate(cell_values):  #gives us a tuple of an index and value
    cell_list[i].value = val    #use the index on cell_list and the val from cell_values

new.update_cells(cell_list)

#new.update_acell(f'AA{x}',nmc_cost[0])

"""# Promedia"""

promedia = pd.read_csv(promedia_file)

promedia

f'{yesterday.year}-{yesterday:%m}-{yesterday:%d}'

promedia[promedia['Day'] == f'{yesterday.year}-{yesterday:%m}-{yesterday:%d}']

promedia = promedia[promedia['Day'] == f'{yesterday.year}-{yesterday:%m}-{yesterday:%d}']

if 'Day' in promedia.columns:
    promedia['Day'] = pd.to_datetime(promedia['Day']).dt.date

    promedia.sort_values(by='Day', ascending = False,inplace = True)
    promedia = promedia.reset_index()
    promedia.drop(['index'],axis = 1, inplace = True)
elif 'Week' in promedia.columns:
    promedia['Week'] = pd.to_datetime(promedia['Week']).dt.date

    promedia.sort_values(by='Week', ascending = False,inplace = True)
    promedia = promedia.reset_index()
    promedia.drop(['index'],axis = 1, inplace = True)

promedia

promedia['Spend'] = promedia['Spend'].str.replace('$','',regex=True)
promedia['Spend'] = promedia['Spend'].replace(',','',regex=True).astype(float)
promedia

promedia['n_c'] = promedia['Spend']*-1
promedia_cost = promedia['n_c'].tolist()
promedia_cost

range_promedia = 'AB{}:AB{}'.format(x,limit-1)
range_promedia

len(range(x,limit))

#https://stackoverflow.com/questions/16675258/python-gspread-how-can-i-update-multiple-cells-with-different-values-at-once
if len(promedia) == len(range(x,limit)):
    cell_list = new.range(range_promedia)
    cell_values = promedia_cost

    for i, val in enumerate(cell_values):  #gives us a tuple of an index and value
        cell_list[i].value = val    #use the index on cell_list and the val from cell_values

    new.update_cells(cell_list)
else:
    new.update_acell(f'AB{x}',promedia_cost[0])

"""# Aov part 
just getting the calculator to add the numbers automaticlly 

"""

aov

valid_stores = ['Draft Orders', 'UMG1']
aov = aov[(aov['api_client_title'].isin(valid_stores)) & (aov['net_quantity'] > 0) & (aov['net_sales'] >= 100)]
aov['day'] =pd.to_datetime(aov['day']).dt.date
aov_g = aov.groupby(['day'])['net_sales','net_quantity'].sum()
aov_g = aov_g.iloc[0:-1]
aov_g['aov'] = aov_g['net_sales'] / aov_g['net_quantity'].astype(float)
aov_total = aov_g['net_sales'].sum() / aov_g['net_quantity'].astype(float).sum()

print(round(aov_total,3))

aov_g = aov_g.sort_index(ascending = False)

aov_g

#setting the aov range , this should be updated monthly for the start of month index
range_aov = 'BC{}:BC{}'.format(x,limit-1)
range_aov

aov_list = aov_g['aov'].tolist()
aov_list

#https://stackoverflow.com/questions/16675258/python-gspread-how-can-i-update-multiple-cells-with-different-values-at-once
cell_list = new.range(range_aov)
cell_values = aov_list

for i, val in enumerate(cell_values):  #gives us a tuple of an index and value
    cell_list[i].value = val    #use the index on cell_list and the val from cell_values

new.update_cells(cell_list, value_input_option='USER_ENTERED')

new.update_acell('BC6', round(aov_total,3))

"""# Formulas for new row
this will update all the formulas, seems tedious and long hard code
"""

if limit - x < 30:
    prev_x = 30 -(limit-x-1) + limit
    print(prev_x)

x

merchfees_sh = main.worksheet('Merchant Fees')

f'{yesterday.day}-{yesterday:%b}-{yesterday:%y}'

merchfees_sh.find(f'{yesterday.day}-{yesterday:%b}-{yesterday:%y}')

merchfees_x = merchfees_sh.find(f'{yesterday.day}-{yesterday:%b}-{yesterday:%y}').row
merchfees_x

# wirte the formulas 
# estimate net profit is  (Net Sales + Cogs Supplies and Materials + Average Cogs Retruns +Total marketing + operating expnses + merchent fees + oro +average fullfilment cost+estimate epp)
formula1 = f'=-30000/{current_month_days_count}'
formula2 = f'=C{x}+D{x}'
formula3 = '=iferror(E{}+F{},"TBD")'.format(x,x)
formula4 = "=abs(H{}/G{})".format(x,x)
formula5 = "=-K{}*G{}".format(x,x)
#formula6 = f'=if(I{x}<0.16,"16.00%",I{x})'
formula6 = '16.00%'
formula7 = "=iferror((vlookup(A{},'Imported Data'!DL:DN,3,0)*-1),\"0\")".format(x)
formula8 = '=iferror(J{}+G{}+L{},"TBD")'.format(x,x,x)
formula9 = f"='Return Requests'!F{x-3}"
formula10 = '=iferror(abs(N{}/G{}),"TBD")'.format(x,x)
formula11= '=P{}+Q{}'.format(x,x)
formula12 = f'=7000/{current_month_days_count}'

formula13 = f'=abs(J{x}*0.25)'

#if limit - x < 30:
#    formula13 = f'=average(T{x}:T{limit-1},T{limit+1}:T{prev_x})'
#else:
#    formula13 = f'=average(T{x}:T{limit-1})'


formula14 = '=SUM(V{}:AF{})'.format(x,x)
formula15 = f'=-120000/{current_month_days_count}'
formula16 = f'=-190000/{current_month_days_count}'
formula17 = '=AH{}+AI{}'.format(x,x)
formula18 = "='Merchant Fees'!D{}".format(merchfees_x)


formula19 = f'=-G{x}*0.02'
#if limit - x < 30:
#    formula19 = f'=AVERAGE($AK${x}:$AK${limit-1},$AK${limit+1}:$AK${prev_x})' 
#else:
#    formula19 = f'=AVERAGE($AK${x}:$AK${limit-1})'

formula20 = f'=-25000/{current_month_days_count}'

formula21 = f'=-G{x}*0.022'
#if limit - x < 30:
#    formula21 = f'=AVERAGE($AN${x}:$AN${limit-1},$AN${limit+1}:$AN${prev_x})' 
#else:
#    formula21 = f'=AVERAGE($AN${x}:$AN${limit-1})'
    
formula22 = f'=R{x}+S{x}+U{x}+AL{x}+AM{x}+AO{x}'
formula23 = f'=M{x}+AP{x}'
formula24 = f'=AQ{x}+AG{x}'
formula25 = f'=G{x}+H{x}+L{x}+R{x}+T{x}+AG{x}+A{x}+AK{x}+AM{x}+AN{x}'
formula26 = f'=M{x}+AP{x}+AG{x}+AJ{x}'
formula27 = f'=G{x}/AG{x}*-1'
formula28 = f'=M{x}/AG{x}*-1'
formula29 = f'=AG{x}/AW{x}*-1'
formula30 = f'=G{x}/B{x}'

formulas = [formula1, formula2, formula3, formula4, formula5, formula6, formula7,
            formula8, formula9, formula10,formula11, formula12, formula13, formula14,
            formula15, formula16,formula17,formula18,formula19,formula20,formula21,
            formula22,formula23,formula24,formula25,formula26,formula27,
            formula28,formula29,formula30]
print(len(formulas))
for f in formulas:
    print(f)

#now we write the cells with formulas
def_rev = 'D{}'.format(x)
gross_sales_new = 'E{}'.format(x)
real_sales = 'G{}'.format(x)
act_shop_ratio = 'I{}'.format(x)
estimated_refunds = 'J{}'.format(x)
estimated_refunds_ratio ='K{}'.format(x)
net_chargbacks ='L{}'.format(x)
net_sales = 'M{}'.format(x)
ret_req = 'N{}'.format(x)
refund_real_ratio = 'O{}'.format(x)
n_cogs_daily = 'R{}'.format(x) 
def_cogs = 'S{}'.format(x)
avg_rt_cogs = 'U{}'.format(x)
total_m = 'AG{}'.format(x)
g_a = 'AH{}'.format(x)
payroll = 'AI{}'.format(x)
expenses = 'AJ{}'.format(x)
merchent = 'AK{}'.format(x)
avg_merchent = 'AL{}'.format(x)
oro = 'AM{}'.format(x)
avg_ful_cst = 'AO{}'.format(x)
total_cogs = 'AP{}'.format(x)
gross = 'AQ{}'.format(x)
contribution = 'AR{}'.format(x)
net_profit = 'AS{}'.format(x)
est_net_profit = 'AT{}'.format(x)
roas = 'AU{}'.format(x)
roas2 = 'AV{}'.format(x)
cac = 'AX{}'.format(x)
aov_all = 'BD{}'.format(x)

f_cells = [def_rev, gross_sales_new ,real_sales,act_shop_ratio ,estimated_refunds, 
           estimated_refunds_ratio,net_chargbacks, net_sales, ret_req, refund_real_ratio, 
           n_cogs_daily, def_cogs ,avg_rt_cogs,
           total_m, g_a, payroll, expenses, merchent,avg_merchent, 
           oro, avg_ful_cst, total_cogs, gross, contribution, net_profit, 
           est_net_profit, roas, roas2, cac, aov_all]
print(len(f_cells))
for c in f_cells:
    print(c)

for n in range(0,30):
    new.update_acell(f_cells[n], formulas[n])

"""# First customers"""

first

x

first_o = int(first.loc[0,'orders'])
first_o

new.update_acell('AW{}'.format(x), first_o)

"""# Revenue Part

"""

roas_tab = main.worksheet("Marketing ROAS")

roas_yesterday = f'{yesterday.day}-{yesterday:%b}-{yesterday:%y}'
roas_yesterday

cell = roas_tab.find(roas_yesterday)
r_x = cell.row
r_x

cell = roas_tab.find(mtd_str)
r_limit = cell.row
r_limit

#will add naf with condition ,as it dosen't always have value 
web_revenue = pd.DataFrame()
web_revenue['fb'] = fb_g['Purchases Conversion Value']
web_revenue['taboola'] = tb_g['Value']
web_revenue['adroll'] = adroll_g['Attributed Revenue']
web_revenue['google'] = google_g['Conv. value']
web_revenue['bing'] = bing_g['Revenue']

web_revenue

#this is to split around the mtd row

web_days = len(web_cost)
current_month_days = limit-x
last_month = web_days-current_month_days

print( web_days, current_month_days, last_month)

web_revenue[:current_month_days]

web_revenue[current_month_days:]

web_revenue.fillna(0,inplace=True)

r_limit - r_x <= 6

r_limit+last_month

limit - x >=  len(web_revenue)

#range for web current month
if limit - x <  len(web_revenue):
#if r_limit - r_x <= 6:
    fb_r_1 = 'E{}:E{}'.format(r_x, r_limit-1) 
    fb_r_2 = 'E{}:E{}'.format(r_limit+1, r_limit+last_month)

    tb_r_1 = 'H{}:H{}'.format(r_x, r_limit-1) 
    tb_r_2 = 'H{}:H{}'.format(r_limit+1, r_limit+last_month)

    adroll_r_1 = 'K{}:K{}'.format(r_x, r_limit-1) 
    adroll_r_2 = 'K{}:K{}'.format(r_limit+1, r_limit+last_month)

    google_r_1 = 'N{}:N{}'.format(r_x, r_limit-1) 
    google_r_2 = 'N{}:N{}'.format(r_limit+1, r_limit+last_month)

    bing_r_1 = 'Q{}:Q{}'.format(r_x, r_limit-1) 
    bing_r_2 = 'Q{}:Q{}'.format(r_limit+1, r_limit+last_month)
else:
    fb_r_1 = 'E{}:E{}'.format(r_x, r_x+current_month_days-1) 
    fb_r_2 = 'E{}:E{}'.format(r_limit+1, r_limit+last_month)

    tb_r_1 = 'H{}:H{}'.format(r_x, r_x+current_month_days-1)
    tb_r_2 = 'H{}:H{}'.format(r_limit+1, r_limit+last_month)

    adroll_r_1 = 'K{}:K{}'.format(r_x, r_x+current_month_days-1) 
    adroll_r_2 = 'K{}:K{}'.format(r_limit+1, r_limit+last_month)

    google_r_1 = 'N{}:N{}'.format(r_x, r_x+current_month_days-1)
    google_r_2 = 'N{}:N{}'.format(r_limit+1, r_limit+last_month)

    bing_r_1 = 'Q{}:Q{}'.format(r_x, r_x+current_month_days-1)
    bing_r_2 = 'Q{}:Q{}'.format(r_limit+1, r_limit+last_month)

web_revenue[:current_month_days]

tb_r_2

# this should be a function ad repeated instead of written many times
if limit - x <  len(web_revenue):
#if r_limit - r_x <= 6:
    cell_list = roas_tab.range(fb_r_1)
    cell_values = web_revenue['fb'][:current_month_days].values.tolist()

    for i, val in enumerate(cell_values):  #gives us a tuple of an index and value
        cell_list[i].value = val 
    roas_tab.update_cells(cell_list)
    print(cell_list)

    cell_list = roas_tab.range(fb_r_2)
    cell_values = web_revenue['fb'][current_month_days:].values.tolist()

    for i, val in enumerate(cell_values):  #gives us a tuple of an index and value
        cell_list[i].value = val    #use the index on cell_list and the val from cell_values

    roas_tab.update_cells(cell_list)
    print(cell_list)


    cell_list = roas_tab.range(tb_r_1)
    cell_values = web_revenue['taboola'][:current_month_days].values.tolist()

    for i, val in enumerate(cell_values):  #gives us a tuple of an index and value
        cell_list[i].value = val    #use the index on cell_list and the val from cell_values

    roas_tab.update_cells(cell_list)
    print(cell_list)


    cell_list = roas_tab.range(tb_r_2)
    cell_values = web_revenue['taboola'][current_month_days:].values.tolist()

    for i, val in enumerate(cell_values):  #gives us a tuple of an index and value
        cell_list[i].value = val    #use the index on cell_list and the val from cell_values

    roas_tab.update_cells(cell_list)
    print(cell_list)


    cell_list = roas_tab.range(adroll_r_1)
    cell_values = web_revenue['adroll'][:current_month_days].values.tolist()

    for i, val in enumerate(cell_values):  #gives us a tuple of an index and value
        cell_list[i].value = val    #use the index on cell_list and the val from cell_values

    roas_tab.update_cells(cell_list)
    print(cell_list)



    cell_list = roas_tab.range(adroll_r_2)
    cell_values = web_revenue['adroll'][current_month_days:].values.tolist()

    for i, val in enumerate(cell_values):  #gives us a tuple of an index and value
        cell_list[i].value = val    #use the index on cell_list and the val from cell_values

    roas_tab.update_cells(cell_list)
    print(cell_list)



    cell_list = roas_tab.range(google_r_1)
    cell_values = web_revenue['google'][:current_month_days].values.tolist()

    for i, val in enumerate(cell_values):  #gives us a tuple of an index and value
        cell_list[i].value = val    #use the index on cell_list and the val from cell_values

    roas_tab.update_cells(cell_list)
    print(cell_list)



    cell_list = roas_tab.range(google_r_2)
    cell_values = web_revenue['google'][current_month_days:].values.tolist()

    for i, val in enumerate(cell_values):  #gives us a tuple of an index and value
        cell_list[i].value = val    #use the index on cell_list and the val from cell_values

    roas_tab.update_cells(cell_list)
    print(cell_list)



    cell_list = roas_tab.range(bing_r_1)
    cell_values = web_revenue['bing'][:current_month_days].values.tolist()

    for i, val in enumerate(cell_values):  #gives us a tuple of an index and value
        cell_list[i].value = val    #use the index on cell_list and the val from cell_values

    roas_tab.update_cells(cell_list)
    print(cell_list)




    cell_list = roas_tab.range(bing_r_2)
    cell_values = web_revenue['bing'][current_month_days:].values.tolist()

    for i, val in enumerate(cell_values):  #gives us a tuple of an index and value
        cell_list[i].value = val    #use the index on cell_list and the val from cell_values

    roas_tab.update_cells(cell_list)
    print(cell_list)
    
else:
    cell_list = roas_tab.range(fb_r_1)
    cell_values = web_revenue['fb'].values.tolist()

    for i, val in enumerate(cell_values):  #gives us a tuple of an index and value
        cell_list[i].value = val 
    roas_tab.update_cells(cell_list)
    print(cell_list)



    cell_list = roas_tab.range(tb_r_1)
    cell_values = web_revenue['taboola'].values.tolist()

    for i, val in enumerate(cell_values):  #gives us a tuple of an index and value
        cell_list[i].value = val    #use the index on cell_list and the val from cell_values

    roas_tab.update_cells(cell_list)
    print(cell_list)



    cell_list = roas_tab.range(adroll_r_1)
    cell_values = web_revenue['adroll'].values.tolist()

    for i, val in enumerate(cell_values):  #gives us a tuple of an index and value
        cell_list[i].value = val    #use the index on cell_list and the val from cell_values

    roas_tab.update_cells(cell_list)
    print(cell_list)




    cell_list = roas_tab.range(google_r_1)
    cell_values = web_revenue['google'].values.tolist()

    for i, val in enumerate(cell_values):  #gives us a tuple of an index and value
        cell_list[i].value = val    #use the index on cell_list and the val from cell_values

    roas_tab.update_cells(cell_list)
    print(cell_list)





    cell_list = roas_tab.range(bing_r_1)
    cell_values = web_revenue['bing'].values.tolist()

    for i, val in enumerate(cell_values):  #gives us a tuple of an index and value
        cell_list[i].value = val    #use the index on cell_list and the val from cell_values

    roas_tab.update_cells(cell_list)
    print(cell_list)

fb_r_1

web_revenue['taboola'][:current_month_days].values.tolist()

#attent_rev = attent_rev[:-1]
#attent_rev['Date'] = pd.to_datetime(attent_rev['Date'])
#attent_rev.sort_values(by='Date',ascending = False, inplace = True)
#attent_rev

#cell_list = roas_tab.range('AO{}:AO{}'.format(r_x,r_limit-1))
#cell_values = attent_rev['Revenue ($)'].values.tolist()

#for i, val in enumerate(cell_values):  #gives us a tuple of an index and value
#    cell_list[i].value = val 
#roas_tab.update_cells(cell_list)
#print(cell_list)

"""# Formulas for Marketing Roas"""

#Formulas 

roas_formula_1 = '=IFERROR((E{}+H{}+K{}+N{}+Q{}+W{}+T{}+Z{}+AF{}+AC{}+AI{}),"TBD")'.format(r_x,r_x,
                                                                                            r_x,r_x,
                                                                                            r_x,r_x,
                                                                                            r_x,r_x,
                                                                                            r_x,r_x,
                                                                                            r_x)
                                                                                            
roas_formula_2 ='=F{}+I{}+L{}+O{}+R{}+U{}+X{}+AA{}+AG{}+AD{}+AJ{}'.format(r_x,r_x,
                                                                          r_x,r_x,
                                                                          r_x,r_x,
                                                                          r_x,r_x,
                                                                          r_x,r_x,
                                                                          r_x)
roas_formula_3 = '=iferror(B{}/C{},"")'.format(r_x,r_x)

roas_formula_4 = "='New Daily Profit'!V{}*-1".format(x)
roas_formula_5 = '=iferror(E{}/F{},"")'.format(r_x,r_x)

roas_formula_6 = "='New Daily Profit'!W{}*-1".format(x)
roas_formula_7 = '=iferror(H{}/I{},"")'.format(r_x,r_x)

roas_formula_8 = "='New Daily Profit'!X{}*-1".format(x)
roas_formula_9 = '=iferror(K{}/L{},"")'.format(r_x,r_x)

roas_formula_10 = "='New Daily Profit'!Y{}*-1".format(x)
roas_formula_11 = '=iferror(N{}/O{},"")'.format(r_x,r_x)

roas_formula_12 = "='New Daily Profit'!Z{}*-1".format(x)
roas_formula_13 = '=iferror(Q{}/R{},"")'.format(r_x,r_x)

roas_formula_14 = "='New Daily Profit'!AA{}*-1".format(x)
roas_formula_15 = '=iferror(T{}/U{},"")'.format(r_x,r_x)

roas_formula_16 = "='New Daily Profit'!AB{}*-1".format(x)
roas_formula_17 = '=iferror(W{}/X{},"")'.format(r_x,r_x)

roas_formula_18 = "='New Daily Profit'!AC{}*-1".format(x)
roas_formula_19 = '=iferror(Z{}/AA{},"")'.format(r_x,r_x)

roas_formula_20 = "='New Daily Profit'!AD{}*-1".format(x)
roas_formula_21 = '=iferror(AF{}/AG{},"")'.format(r_x,r_x)

roas_formulas = [roas_formula_1, roas_formula_2, roas_formula_3, roas_formula_4, roas_formula_5,
                roas_formula_6, roas_formula_7, roas_formula_8, roas_formula_9, roas_formula_10,
                roas_formula_11, roas_formula_12, roas_formula_13, roas_formula_14, roas_formula_15,
                roas_formula_16, roas_formula_17, roas_formula_18, roas_formula_19,
                 roas_formula_20, roas_formula_21]
print(len(roas_formulas))

# Cell locations
total_rev = 'B{}'.format(r_x)
total_cost = 'C{}'.format(r_x)
total_roas = 'D{}'.format(r_x)

fb_cost = 'F{}'.format(r_x)
fb_roas = 'G{}'.format(r_x)

tb_cost = 'I{}'.format(r_x)
tb_roas = 'J{}'.format(r_x)

adroll_cost = 'L{}'.format(r_x)
adroll_roas = 'M{}'.format(r_x)

google_cost = 'O{}'.format(r_x)
google_roas = 'P{}'.format(r_x)

bing_cost = 'R{}'.format(r_x)
bing_roas = 'S{}'.format(r_x)

nmc_cost = 'U{}'.format(r_x)
nmc_roas = 'V{}'.format(r_x)

pro_cost = 'X{}'.format(r_x)
pro_roas = 'Y{}'.format(r_x)

bmgtv_cost = 'AA{}'.format(r_x)
bmgtv_roas = 'AB{}'.format(r_x)

pebble_cost = 'AG{}'.format(r_x)
pebble_roas = 'AH{}'.format(r_x)

mkt_cell_locs = [total_rev, total_cost, total_roas, fb_cost, fb_roas, tb_cost, tb_roas,
                adroll_cost, adroll_roas, google_cost, google_roas, bing_cost, bing_roas,
                nmc_cost, nmc_roas, pro_cost, pro_roas, bmgtv_cost, bmgtv_roas,
                pebble_cost, pebble_roas]

print(len(mkt_cell_locs))
for form in mkt_cell_locs:
    print(form)

for n in range(0,21):
    roas_tab.update_acell(mkt_cell_locs[n], roas_formulas[n])

"""# ROAS Web Sheet"""

r_web = main.worksheet("ROAS Web")

yesterday

# create Dataframe with the data to add daily 30-Jul-21
day_r = [roas_yesterday] *10
year = ['2021']*10
month = ['August']*10
website= ['Outbrain' , 'Bing' ,'Bing' , 'Google' , 'Google' ,'Google' ,'Google' ,'Adroll', 'Taboola','Facebook']
web_roas_s= pd.DataFrame()
web_roas_s['Day'] = day_r
web_roas_s['Year'] = year
web_roas_s['Month'] = month
web_roas_s['Website'] = website
web_roas_s['Account'] = website

web_roas_s

#add columns and values to the Dataframe
w_g = google.sort_values(by='Day',ascending=False)[:4]
w_b = bing[-3:-1]

bing

w_b

w_g

web_roas_s['Spend'] = 0
web_roas_s['Conv. Value'] = 0
#Google tends to change their column names

if'Account' in w_g.columns:
    web_roas_s['Account'][3:7] = w_g['Account']
if'Account name' in w_g.columns:
    web_roas_s['Account'][3:7] = w_g['Account name']
web_roas_s['Account'][1:3] = w_b['Account name']
web_roas_s['Spend'][3:7] = w_g['Cost']
web_roas_s['Spend'][1:3] = w_b['Spend']
web_roas_s['Spend'][7] = adroll_g['Spend'][0]
web_roas_s['Spend'][8] = tb_g['Spent'][0]
web_roas_s['Spend'][9] = fb_g['Amount spent (USD)'][0]
web_roas_s['Conv. Value'][3:7] = w_g['Conv. value']
web_roas_s['Conv. Value'][1:3] = w_b['Revenue']
web_roas_s['Conv. Value'][7] = adroll_g['Attributed Revenue'][0]
web_roas_s['Conv. Value'][8] = tb_g['Value'][0]
web_roas_s['Conv. Value'][9] = fb_g['Purchases Conversion Value'][0]
web_roas_s

web_roas_s['ROAS'] = web_roas_s['Conv. Value']/web_roas_s['Spend']
web_roas_s['ROAS'][0] = 0
web_roas_s

#insert empty 10 row if the last yesterday is not added yet 
time.sleep(60)
if r_web.acell('S3').value != roas_yesterday:
    for r in range(0,10):
        time.sleep(3)
        r_web.insert_row([''],index=3)

web_range = 'S3:Z12'
web_range

web_roas_s.replace(np.inf, 0 , inplace=True)

web_roas_s.fillna(0 , inplace=True)

# fill the empty rows
r_web.update(web_range , web_roas_s.values.tolist(),value_input_option='USER_ENTERED')

"""# TV balance"""

tv_b_sh = main.worksheet('TV Balance')

time.sleep(60)
tv_b_sh.insert_row([''],index=3)

new_yesterday

x

#promedia = promedia[-1:]
#promedia.reset_index(inplace=True)
promedia

pro_qr = promedia['QR'][0]
pro_qr

tv_b_sh.update_acell('A3',new_yesterday)
tv_b_sh.update_acell('E3', "='New Daily Profit'!X{}*-1".format(x))
tv_b_sh.update_acell('G3','=G4+E3+F3')
tv_b_sh.update_acell('I3',float(pro_qr))
tv_b_sh.update_acell('J3',"='New Daily Profit'!Y{}*-1".format(x))

tv_b_sh.update_acell('L3','=J3+L4+K3')

"""# Promedia Unique calls"""

promedia_sh = main.worksheet('Promedia')

promedia['Unique'][0]

promedia

roas_yesterday

promedia_x = promedia_sh.find(roas_yesterday).row
promedia_x

promedia_sh.update_acell('D{}'.format(promedia_x), float(promedia['Unique'][0]) )

promedia_sh.update_acell('E{}'.format(promedia_x), f"='New Daily Profit'!AB{x}*-1" )

"""# Filling row Data 


"""

# Loading the sheets 
fb_sheet = gc.open('FB Ad Spend raw data').worksheet("raw data")
tb_sheet = gc.open('Taboola Ad Spend raw data').worksheet("raw data")
adroll_sheet = gc.open('Adroll raw data').worksheet("Raw Data")
google_sheet = gc.open('Adwords Ad Spend raw data pull').worksheet("raw data")
bing_sheet = gc.open('Bing Ad Spend raw data').worksheet("new raw data")

facebook

facebook['Day'] = pd.to_datetime(facebook['Day']).dt.strftime('%m/%d/%Y')
facebook['Year'] = pd.to_datetime(facebook['Day']).dt.year
facebook.sort_values(by=['Year','Day'], ascending=True, inplace = True)
facebook.reset_index(inplace = True)
facebook.drop(['index','Year'],axis =1,inplace =True)
facebook.fillna(0,inplace=True)

facebook['Day'][29]

facebook

facebook.columns

fb_first_column = fb_sheet.range("A1:A{}".format(fb_sheet.row_count))
for cell in fb_first_column:
    if cell.value == facebook['Day'][0]:
        print(cell)
        fb_x = cell.row
        print(fb_x)

len(facebook)

fb_sheet.update('A{}:U{}'.format(fb_x, fb_x+len(facebook)-1), facebook.values.tolist(), value_input_option='USER_ENTERED')

taboola

taboola['Date (US/Eastern)'] = pd.to_datetime(taboola['Date (US/Eastern)'])
taboola.sort_values(by='Date (US/Eastern)', inplace = True)
taboola['Date (US/Eastern)'] = pd.to_datetime(taboola['Date (US/Eastern)']).dt.strftime('%b %d, %Y')
#taboola.sort_values(by='Date (US/Eastern)', inplace = True)
#taboola.fillna(0,inplace=True)

taboola

taboola.info()

taboola['Viewable Impressions'] = taboola['Viewable Impressions'].replace(',','', regex=True).astype(float)
taboola['Clicks'] = taboola['Clicks'].replace(',','', regex=True).astype(float)
taboola['vCTR'] = taboola['vCTR'].replace('%','', regex=True).astype(float)
taboola['Conversion Rate'] = taboola['Conversion Rate'].replace('%','', regex=True).astype(float)
taboola['Value'] = taboola['Value'].replace(',','', regex=True).astype(float)



taboola

taboola_last30 = taboola['Date (US/Eastern)'][29]
taboola_last30 = pd.to_datetime(taboola_last30)

taboola_last30_str = f'{taboola_last30:%b} {taboola_last30:%d}, {taboola_last30.year}'
taboola_last30_str

tb_sheet.find(taboola_last30_str)

tb_first_column = tb_sheet.range("A1:A{}".format(tb_sheet.row_count))
for cell in tb_first_column:
    if cell.value == taboola_last30_str:
        print(cell)
        tb_x = cell.row
        print(tb_x)

len(taboola)

tb_sheet.update('A{}:K{}'.format(tb_x, tb_x+len(taboola)-1), taboola.values.tolist(), value_input_option='USER_ENTERED')

adroll['Day'] = pd.to_datetime(adroll['Day']).dt.strftime('%Y-%m-%d')

adroll['Day']

adroll.fillna(0,inplace=True)

adroll_first_column = adroll_sheet.range("A1:A{}".format(adroll_sheet.row_count))
for cell in adroll_first_column:
    if cell.value == str(adroll['Day'][1]):
        print(cell)
        adr_x = cell.row
        print(adr_x)

len(adroll)

adroll_sheet.update('A{}:I{}'.format(adr_x, adr_x+len(adroll)-2), adroll[1:].values.tolist(), value_input_option='USER_ENTERED')

google['Day'] = pd.to_datetime(google['Day'])
google.sort_values(by='Day', inplace = True)
google['Day'] = pd.to_datetime(google['Day']).dt.strftime('%m/%d/%Y')
google.reset_index(inplace = True)
google.drop(['index'],axis =1,inplace =True)
google.fillna(0,inplace=True)

google['Day']

#need to add cleaning code to get all numbers to be int 
google.info()

google['Clicks'] = google['Clicks'].replace(',','', regex=True).astype(float)

if 'Impressions' in google.columns:
    google['Impressions'] = google['Impressions'].replace(',','', regex=True).astype(float)
    
if 'Impr.' in google.columns:
    google['Impr.'] = google['Impr.'].replace(',','', regex=True).astype(float)
    

google['Conv. value'] = google['Conv. value'].replace(',','', regex=True).astype(float)
google['Cost'] = google['Cost'].replace(',','', regex=True).astype(float)

#google['CTR'] = google['CTR'].replace('%','', regex=True).astype(float)
#google['CTR'] = google['CTR'].astype(str) + '%'
google['Impr. (Abs. Top) %'] = google['Impr. (Abs. Top) %'].replace('%','', regex=True).astype(float)
#google['Impr. (Abs. Top) %'] = google['Impr. (Abs. Top) %'].astype(str) + '%'
google['Impr. (Top) %'] = google['Impr. (Top) %'].replace('%','', regex=True).astype(float)
#google['Impr. (Top) %'] = google['Impr. (Top) %'].astype(str) + '%'
google['Conv. rate (current model)'] = google['Conv. rate (current model)'].replace('%','', regex=True).astype(float)
#google['Conv. rate'] = google['Conv. rate'].astype(str) + '%'
google

len(google.columns)

google.drop(['Customer ID'], axis =1 , inplace = True)

google_first_column = google_sheet.range("A1:A{}".format(google_sheet.row_count))
for cell in google_first_column:
    if cell.value == google['Day'][0]:
        print(cell)
        google_x = cell.row
        print(google_x)
        break

len(google)

google_sheet.update('A{}:M{}'.format(google_x, google_x+len(google)-1), google.values.tolist(), value_input_option='USER_ENTERED')

bing.fillna(0,inplace=True)
bing = bing[:-1]

bing

bing.info()

bing['Revenue'] = bing['Revenue'].replace(',','', regex=True).astype(float)

bing['CTR'] = bing['CTR'].replace('%','', regex=True).astype(float)
#google['CTR'] = bing['CTR'].astype(str) + '%'


bing['Conversion rate'] = bing['Conversion rate'].replace('%','', regex=True).astype(float)
#google['Conv. rate'] = bing['Conv. rate'].astype(str) + '%'
bing

bing['Date'][0]

bing['Date'].astype(str)

bing['Date'] = bing['Date'].astype(str)

bing_first_column = bing_sheet.range("A1:A{}".format(bing_sheet.row_count))
for cell in bing_first_column:
    if cell.value == bing['Date'][0]:
        print(cell)
        bing_x = cell.row
        print(bing_x)
        break

len(bing)

bing_sheet.update('A{}:M{}'.format(bing_x, bing_x+len(bing)-1), bing.values.tolist() , value_input_option='USER_ENTERED')

#attent_sh = gc.open('Attentive ad spend raw')
#attent_sh_cost = attent_sh.worksheet("Daily Message Cost ")
#attent_sh_rev = attent_sh.worksheet("Total Attributed Revenue")

#attent = pd.read_excel(attent_cost_file, sheet_name='Daily Message Cost')
#attent_rev = pd.read_excel(attent_rev_file)

#attent= attent[:-1]
#attent

#attent['Date'][0]

#attent_cost_x = attent_sh_cost.find(attent['Date'][0]).row
#attent_cost_x

#attent_cost_limit = len(attent) -1 +attent_cost_x
#attent_cost_limit

#attent_sh_cost.update('A{}:F{}'.format(attent_cost_x, attent_cost_limit), attent.values.tolist() ,
#                      value_input_option='USER_ENTERED')

#attent_rev = attent_rev[:-1]
#attent_rev

#attent_rev_x = attent_sh_rev.find(attent_rev['Date'][0]).row
#attent_rev_x

#attent_rev_limit = len(attent_rev) -1 +attent_rev_x
#attent_rev_limit

#attent_sh_rev.update('A{}:C{}'.format(attent_rev_x, attent_rev_limit), attent_rev.values.tolist() ,
#                      value_input_option='USER_ENTERED')

"""# Fullifllment raw data"""

fullfill_sh = gc.open('Fulfillment Cost for Daily Profit')
#usps_sh = fullfill_sh.worksheet('USPS - Shipping Easy')
easy_sh = fullfill_sh.worksheet('Easypost')
#stamps_sh = fullfill_sh.worksheet('USPS - Stamps')
summary_sh = fullfill_sh.worksheet('Summary')

the_day_before_str_dash = f'{the_day_before:%Y}-{the_day_before:%m}-{the_day_before:%d}'
the_day_before_str_dash

#usps_sh_first_column = usps_sh.range("A1:A{}".format(usps_sh.row_count))
#for cell in usps_sh_first_column:
#    if cell.value == '':
#        print(cell)
#        usps_x = cell.row
#        print(usps_x)
#        break
#    elif cell.row == usps_sh.row_count:
#        
#        usps_x = cell.row + 1
#        print(usps_x)

#last_usps_old_row = usps_sh.row_count

#usps_sh.resize(rows=last_usps_old_row + len(usps_ship)+1)

#usps_ship.fillna('',inplace=True)

#usps_sh.update('A{}:AE{}'.format( usps_x , usps_x + len(usps_ship)),
#               usps_ship.values.tolist(), 
#                       value_input_option='USER_ENTERED')

today = date.today()

yesterday = date.today() - timedelta(days=1)
the_day_before = date.today() - timedelta(days=2)

today_es = f'{today:%Y}-{today:%m}-{today:%d}'
today_es

yesterday_str_es = f'{yesterday:%Y}-{yesterday:%m}-{yesterday:%d}'
yesterday_str_es

the_day_before_es = f'{the_day_before:%Y}-{the_day_before:%m}-{the_day_before:%d}'
the_day_before_es

eas_cells = easy_sh.findall(yesterday_str_es)

#stamps_sh.row_count

#stamps_sh_first_column = stamps_sh.range("A1:A{}".format(stamps_sh.row_count))
#for cell in stamps_sh_first_column:
#    if cell.value == '':
#        print(cell)
#        stamps_x = cell.row
#        print(stamps_x)
#        break
#    elif cell.row == stamps_sh.row_count:
#        
#        stamps_x = cell.row + 1
#        print(stamps_x)

#last_stamps_old_row = stamps_sh.row_count

#stamps_sh.resize(rows=last_stamps_old_row + len(stamps) + 1)

#last_stamps_old_row

#stamps_x + len(stamps)+1

#stamps.fillna('', inplace=True)

#stamps_sh.update('A{}:Ab{}'.format( stamps_x , stamps_x + len(stamps)+1),
#               stamps.values.tolist(), 
#                       value_input_option='USER_ENTERED')

#Update summarry sheet
if summary_sh.acell('B3').value != f'{yesterday.year}-{yesterday:%m}-{yesterday:%d}':
    summary_sh.insert_row([''],index=3)

f'{yesterday.year}-{yesterday:%m}-{yesterday:%d}'

exp_stamps.iloc[0,0]

exp_st_value = exp_stamps.iloc[0,0].replace('$','')
exp_st_value = exp_st_value.replace(',','')
exp_st_value = float(exp_st_value)
exp_st_value

summary_sh.update_acell('B3', f'{yesterday.year}-{yesterday:%m}-{yesterday:%d}')
#summary_sh.update_acell('C4', '=iferror(vlookup(B4,$M:$N,2,FALSE)*-1,"0")')
summary_sh.update_acell('C3', exp_st_value * -1)
summary_sh.update_acell('D3', '=iferror(vlookup(B3,$Q:$R,2,FALSE),"0")*-1')
summary_sh.update_acell('E3', '=iferror(vlookup(B3,$T:$U,2,FALSE),"0")')
summary_sh.update_acell('F3', '=C3+D3+E3')

"""# Confirm Easy post refunds"""

returns_lbl = gc.open('Return Labels Refund')
es_refunds = returns_lbl.worksheet('Easypost Daily Refunded')

the_day_before

es_refunds.acell('A3').value

es_refunds.find(f'{yesterday.year}-{yesterday:%m}-{yesterday:%d}')

if es_refunds.find(f'{yesterday.year}-{yesterday:%m}-{yesterday:%d}') != None:
    es_refunds_x = es_refunds.find(f'{yesterday.year}-{yesterday:%m}-{yesterday:%d}').row
else:
    es_refunds_x = 3

if es_refunds.acell(f'A{es_refunds_x}').value == f'{yesterday.year}-{yesterday:%m}-{yesterday:%d}':
    summary_sh.update_acell('T3', f'{yesterday.year}-{yesterday:%m}-{yesterday:%d}')
    summary_sh.update_acell('U3', es_refunds.acell(f'B{es_refunds_x}').value)
else:
    summary_sh.update_acell('T3', f'{yesterday.year}-{yesterday:%m}-{yesterday:%d}')
    summary_sh.update_acell('U3', 0)

"""# Updated Fullfilment cost"""

summary_sh.acell('F3').value

act_fullfilment_c = summary_sh.acell('F3').value
act_fullfilment_c = act_fullfilment_c.replace('$','')
act_fullfilment_c = act_fullfilment_c.replace(',','')

act_fullfilment_c

new.update_acell('AN{}'.format(x), act_fullfilment_c)

end_time= datetime.now()
end_time

end_time - start_time







